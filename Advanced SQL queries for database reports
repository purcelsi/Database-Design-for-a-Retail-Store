----------------------
#QUERIES TO DELIVER
----------------------

#1. (View) - Show all transactions for ANY given week (you decide the dates). 
#2. (Trigger) - Create a Trigger that updates stock levels once a sale takes place. 
#3. (View) - Create a View of all stock (grouped by the supplier) 
#4. (Stored Procedure) - Detail and total all sales for the year, group these by each month. (A Group By with RollUp) 
#5. (View) - Display the growth in sales (as a percentage) for your business, from the 1st month of opening until the end of the year. 
#6. (Stored Procedure) - Create a stored procedure that will display all orders by customer and their county. 
#7. (Stored Procedure) - Create a stored procedure that will display all returns, grouped by month.
#8. (Stored Procedure) - Display a speciﬁc customers details and all of their relevant orders to date by passing a parameter (eg: CustomerID).	
#9. (Trigger) - Create a Trigger that will populate a ‘history table’ once a customers contact details have been updated.	
#10. (View) - Create  a View that will display a breakdown of (a) sales (b) proﬁt and (c) returns for each month of the year. 
#11. After completing each of the individual reports, you are required to add all of the above scripts into one unique sql ﬁle that will run all of the scripts together and output the data into a Data Mart.


-----------------------
-- start
-----------------------
use grocery_store;

#1. (View) - Show all transactions for ANY given week (you decide the dates).
	#select * from transaction_summary;
	#select * from product_inventory;
    
	CREATE or replace VIEW transaction_week_view AS
		SELECT *
			FROM transaction_summary
				WHERE transaction_timestamp between '2019-12-02' and '2019-12-08';

	#look at the view
	select  *
		FROM transaction_week_view;
    
    
#2. (Trigger) - Create a Trigger that updates stock levels once a sale takes place. 

	DELIMITER $$
		CREATE TRIGGER UpdateStock
		AFTER INSERT ON transaction_item_event
			FOR EACH ROW
			BEGIN
			   UPDATE product_inventory
			   SET current_inventory = current_inventory -1
			   WHERE NEW.Product_id = Product_id;
		END$$ 
	DELIMITER ;

#Now testing to see if trigger has been invoked. 
#Inserting a mock value into the transaction_item_event table

#First note that product_id 27 is a actimel yoghurt which is currently at a stock level of 200. 
	select * from product_inventory;

#as transaction item event uses existing stock items we need to update the stock
	insert into stock_item values('78','27', '86', '2019-12-06 12:00:00', '2020-01-29 12:00:00', '2', '2019-12-30 12:00:00' , 0, 1);
	insert into stock_item values('79','27', '86', '2019-12-06 12:00:00', '2020-01-29 12:00:00', '2', '2019-12-30 12:00:10' , 0, 1);

#next, in this test scenario, a customer has purchased 2 items on the same day with a product_id of 27
	insert into transaction_summary values('1023', '2019-09-30 12:00:00', '101', '12','1', '2', '6.24', '0', '0', 'cash', '1', '6.24');

#updating transation_item_event to reflect the above scenario
	insert into transaction_item_event values('78', '2019-12-30 12:00:00', '1023', '27', 1 ,  0 , 0 , '3.12', '0', '12','101', '1');
	insert into transaction_item_event values('79', '2019-12-20 12:00:10', '1023', '27', 1 ,  0 , 0 , '3.12', '0', '12','101', '1');

#Following these inserts, As you can see, the current_inventory for product id 27 (actimel) has now been updated from a stock level of 200 to 198.
	select * from product_inventory;



#3. (View) - Create a View of all stock (grouped by the supplier) 
	#select  * from product_inventory;
        
	CREATE or replace VIEW total_stock_view AS
		SELECT p.*, s.supplier_name
	    	FROM product_inventory p
	    		LEFT JOIN supplier s 
	    			ON p.supplier_id = s.supplier_id;
	
	#look at the view
	select  *
	FROM total_stock_view;

    
#4. (Stored Procedure) - Detail and total all sales for the year, group these by each month. (A Group By with RollUp)

	DELIMITER //
		CREATE procedure GetsTotalAnnualSales()
			BEGIN
				SELECT 
				coalesce (a.sales_month,'GrandTotal') AS sales_month, 
				count(a.transaction_id) as total_sales
					FROM 
					(
					select date_format(transaction_timestamp, "%M-%Y") as sales_month, transaction_id 
					from transaction_summary
					) a
					group by sales_month with rollup;
	END//


	#run the procudure
	Call GetsTotalAnnualSales();
	#drop procedure
	DROP PROCEDURE IF EXISTS GetsTotalAnnualSales;


#5. (View) - Display the growth in sales (as a percentage) for your business, from the 1st month of opening until the end of the year. 
	
	#drop view
	drop view MoM_growth;
    
    #create view
    create or replace view MoM_growth_view as
	#outer select, the final select for a tidy calculation
	select 
	month_year, 
	current_Month_sales, 
	round((current_last_month_sales_difference/last_month_sales)*100,1) as MoM_growth_percent #mysql was throwing errors so a sub-select was needed to cleanly retrieve the elements of this calculation
		FROM
		(
			#one of two inner selects, see above comments for why this was needed
			SELECT
			month_year, 
		    current_month_sales,
			LAG(current_month_sales,1)        OVER w AS last_month_sales, #function to retrieve the previous month's sales using WINDOW on the month
			current_month_sales - LAG(current_month_sales, 1)  OVER w AS current_last_month_sales_difference #this is a calc to get the difference between current month and last month, for reasons above it was easier #to retrieve these first before doing any calculations on them
			FROM 
		    (
		        #innter select to deal with above issues
		        select 
		        date_format(transaction_timestamp,  '%y-%m') as month_year,
		        sum(gross_sales_amount) as current_month_sales
		           from transaction_summary
		           group by 1
		    ) a1
		       WINDOW w AS (ORDER BY month_year)
	    ) a2
	 group by month_year;
	
	 #look at the view
     select * from MoM_growth_view;
    


#6. (Stored Procedure) - Create a stored procedure #that will display all orders by customer and their county.

	DELIMITER //
		CREATE procedure GetsAllCustomers()
			BEGIN
				SELECT fname, lname, address, count(distinct(transaction_id)) as total_transactions, sum(gross_sales_qty) as total_items, sum(gross_sales_amount) as total_purchase_amount
				FROM customer c
					left join transaction_summary t on c.customer_id = t.customer_id
						group by 1,2,3;
	END//
    
    #call the procedure
    Call GetsAllCustomers();
    #drop the procedure
	DROP PROCEDURE IF EXISTS GetsAllCustomers;
    
    
#7. (Stored Procedure) - Create a stored procedure that will display all returns, grouped by month.

	#this is what we want to see
	#select * from transaction_item_event where refund_event = 1;

	DELIMITER //
		CREATE procedure GetsAllReturns()
		BEGIN
			SELECT date_format(transaction_timestamp, "%M %Y") AS Return_Month, t.*
				FROM transaction_item_event t
					WHERE refund_event = 1
						group by return_month, transaction_id;
	END//


	
	#call the procedure
	Call GetsAllReturns();
	#drop the procedure
	DROP PROCEDURE IF EXISTS GetsAllReturns;


#8. (Stored Procedure) - Display a speciﬁc customers details for those that had a transaction
 
    DELIMITER //
        CREATE PROCEDURE GetCustomer(IN cust_id VARCHAR(5))
             BEGIN
                 SELECT a.*
                     FROM 
                        transaction_summary a
                         WHERE a.customer_id = cust_id;
             END //
    DELIMITER ;


#As we can see, a customer with an customer_id of ‘2’ bought 2 items at different time events
	select * from transaction_item_event;

	#call the procedure
	Call GetCustomer('2');
	#drop the procedure
	DROP PROCEDURE IF EXISTS GetCustomer;


#9. (Trigger) - Create a Trigger that will populate a ‘history table’ once a customers contact details have been updated.

#First create a new table called "history table" which will store changes that have been made to a customer's records from the customer table
	CREATE TABLE history_table 
	( 
	    customer_id int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	    fname varchar(50) NOT NULL, 
	    lname varchar(5) NOT NULL,
	    email varchar(50) NOT NULL,
	    address varchar (50) NOT NULL,
	    CustomerUpdateTime datetime DEFAULT NULL
	 );

	describe history_table;

#Then create a UPDATE ON trigger to be invoked when an update is made to a customer's contact details from the customer table
DELIMITER $$
CREATE TRIGGER UpdateCustomer 
    before UPDATE ON customer  
    FOR EACH ROW BEGIN
    
    INSERT INTO history_table SET
     customer_id = customer_id, 
        fname = NEW.fname,
        lname = NEW.lname,
        email = NEW.email,
        address = NEW.address,
        CustomerUpdateTime = NOW()
        ;
END$$
DELIMITER ;

#testing trigger on by updating email address of the first customer in the customer table
#Note that first the customer in the customer table, Mary Smith, has an email address of "Vivamus.euismod@Maurisnondui.ca" and home address of "Ap #719-7635 Laoreet Avenue"
	select * from customer;

#Updating Mary Smith's contact information
	UPDATE customer 
		SET email = 'purcelsi@tcd.ie', address = '192 ashcroft, raheny road, dublin 5'
		WHERE customer_id = '1';

#As you can see, Mary Smith's email and home address has been changed to the new data entry 
	select * from customer;

#And you can also see that the trigger has been invoked by populating the history table with the customer's updated information
	select * from history_table;


#10. (View) - Create  a View that will display a breakdown of (a) sales (b) proﬁt and (c) returns for each month of the year. 
	
	#after experimenting with a single join, it appeared that MYsql does not work well with calcualtions on functions and so an innter select was used to first retrieve "clean" data, or data 
	#that was the output of these functions
    
    create or replace view sales_profits_returns as
    select 
		date_format(a.transaction_timestamp,  '%Y-%M') as sales_month_year,
		sum(a.gross_sales_qty) as gross_sales_qty,
		sum(a.gross_sales_amount) as gross_sales_amount,
		sum(a.refund_qty) as refund_qty,
		sum(a.refund_amount) as refund_amount,
		sum(c.unit_cost) as unit_cost,
		sum(a.gross_sales_amount) - (sum(a.refund_amount) + sum(c.unit_cost)) as profit
			from transaction_summary a
				left join transaction_item_event b on a.transaction_id = b.transaction_id and sales_event = 1
				left join product_inventory c on b.product_id = c.product_id
    group by sales_month_year ;
    
    #drop view
	drop view sales_profits_returns;
	#look at the view
    select * from sales_profits_returns;


#11. After completing each of the individual reports, you are required to add all of the above scripts into one unique sql ﬁle that will run all of the scripts together and output the data into a Data Mart.

#drop database datamart;

## Firstly, create our Data Mart database
Create Database DataMart;
#drop database datamart;


# Connect to grocery_store database
USE DataMart;

# Next create a table within the new Data Mart database for each View SQL Query for the CA2 assignment 
# Creating table in the datamart database and adding in testing scripts to show the result of Query 1, 3, 5, and 10
Create Table DataMart.Query1_Data SELECT * FROM grocery_store.transaction_week_view;
Create Table DataMart.Query3_Data SELECT * FROM grocery_store.total_stock_view;
Create Table DataMart.Query5_Data SELECT * FROM grocery_store.MoM_growth_view;
Create Table DataMart.Query10_Data SELECT * FROM grocery_store.sales_profits_returns;

#Checking the final reports
SELECT * FROM DataMart.Query1_Data;
SELECT * FROM DataMart.Query3_Data;
SELECT * FROM DataMart.Query5_Data;
SELECT * FROM DataMart.Query10_Data;
